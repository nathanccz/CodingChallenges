//PROBLEM

// Create a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with empty elements.



//ANALYSIS AND SOLUTION

//Parameters: We're given one or more arrays that can contain numbers or string letters. Arrays can be empty.

//Return: The function should return a single array that interleaves all elements in the array arguments. 

//Examples: 

// interleave([1, 2, 3], ["c", "d", "e"]) === [1, "c", 2, "d", 3, "e"]
// interleave([1, 2, 3], [4, 5]) === [1, 4, 2, 5, 3, null]
// interleave([1, 2, 3], [4, 5, 6], [7, 8, 9]) === [1, 4, 7, 2, 5, 8, 3, 6, 9]
// interleave([]) === []

//Pseudo Code:

//Since our function can accept any number of arguments, we need to access each array through the "arguments" keyword. This keyword gives us an array-like object containing the arrays we need to work with.
//How do we access each array without know what it'll be? Maybe use a for...of loop through a copy of the arguments array. We also need to loop through each array in that arguments array.
//Use a while loop that checks if some array in the copy of arguments has a length greater than zero (i.e. isn't empty). 
//In each for...of loop within the while loop, push the first element of each array to the result array and shift that element off the current array. Repeat until all arrays in the arguments copy are empty. 
//Return the result. 


function interleave() {

    let result = []
    let copy = Array.from(arguments)
    while(copy.some(arg => arg.length > 0)) {
        for (let array of copy) {
            if (array[0] === undefined) result.push(null)
              else result.push(array[0])
          array.shift()
        }
    }
  
    return result
}